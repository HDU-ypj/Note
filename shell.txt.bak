
教程：菜鸟教程
或者 https://wangdoc.com/bash/intro

#! /bin/bash    // 这里的#!是一个标识，shell脚本的开始，然后指定要使用的shell

1、变量
your_name="runoob.com"	//注意，变量名和等号之间不能有空格
其中命名规则和大多数语言命名规则类似

for file in `ls /etc`
for file in $(ls /etc)

如何使用变量：加一个$符号就ok，也可以加入大括号区分边界
your_name="qinjx"
echo $your_name
echo ${your_name}

echo "I am good at ${skill}Script"
使用变量的时候才加美元符，赋值运算不需要加$符号

只读变量定义：
readonly data="mydata"
删除变量
unset data

shell中有1、局部变量2、环境变量3、shell变量



2、shell中的字符串
字符串是shell编程中最常用最有用的数据类型，字符串可以用单引号，也可以用双引号，也可以不用引号。！！！

a) 	单引号：
	单引号里的任何字符都会原样输出，单引号字符串中的变量是无效的；！！！
	单引号字串中不能出现单独一个的单引号（对单引号使用转义符后也不行），但可成对出现，作为字符串拼接使用。
b)	双引号
	双引号里可以有变量
	双引号里可以出现转义字符
	
your_name="runoob"
# 使用双引号拼接
greeting="hello, "$your_name" !"
greeting_1="hello, ${your_name} !"
echo $greeting  $greeting_1

# 使用单引号拼接
greeting_2='hello, '$your_name' !'
greeting_3='hello, ${your_name} !'
echo $greeting_2  $greeting_3

输出结果：
hello, runoob ! hello, runoob !
hello, runoob ! hello, ${your_name} !

获取字符串长度
len = ${#string}




3、echo的参数

echo -n取消最后的换行符，使得输出紧挨着
echo -e使得字符串中的特殊字符进行解释，如'\n'

如果一行命令过长，则需要添加反斜杠来进行续行

&&和||的短路效应
cat filelist.txt && ls -l filelist.txt
cat filelist.txt || ls -l filelist.txt

type -t 返回命令的类型：别名（alias），关键词（keyword），函数（function），内置命令（builtin）和文件（file）。


4、拓展：*？[abcd]

方括号扩展的形式是[...]，《只有文件确实存在的前提下才会扩展》。如果文件不存在，就会原样输出。！！！
[!abc]或者[^abc]匹配不是abc的项
注意，如果需要匹配[字符，可以放在方括号内，比如[[aeiou]。如果需要匹配连字号-，只能放在方括号内部的开头或结尾，比如[-aeiou]或[aeiou-]。

大括号扩展{...}表示分别扩展成大括号里面的所有值，各个值之间使用逗号分隔。《始终都会扩展》
大括号内部的逗号前后不能有空格。否则，大括号扩展会失效。

$(...)可以扩展成另一个命令的运行结果，该命令的所有输出都会作为返回值。

4、引号和转义
如果命令过长可以使用反斜杠将其改为多行命令

单引号用于保留字符的字面含义，各种特殊字符在单引号里面，都会变为普通字符

通配符*是一个特殊字符，放在双引号之中，就变成了普通字符，会原样输出。这一点需要特别留意，这意味着，双引号里面不会进行文件名扩展。
但是，三个特殊字符除外：美元符号（$）、反引号（`）和反斜杠（\）。这三个字符在双引号之中，依然有特殊含义，会被 Bash 自动扩展
反引号：执行子命令
美元符号：引用变量
反斜杠：转义

5、变量 ！！！！！！！！！！
如果变量的值本身也是变量，可以使用${!varname}的语法，读取最终的值。

$ a="1 2   3"
$ echo $a
1 2 3
$ echo "$a"
1 2   3
上面示例中，变量a的值包含两个连续空格。如果直接读取，Shell 会将连续空格合并成一个。只有放在双引号里面读取，才能保持原来的格式。